#lang sicp

#|Exercise 1.9

(define (+ a b)
  (if (= a 0) 
      b 
      (inc (+ (dec a) b))))

this process is recursive:
> (+ 2 3)
(inc (+ 1 3))
(inc (inc (+ 0 3)))
(inc (inc 3))
(inc 4)
5

(define (+ a b)
  (if (= a 0) 
      b 
      (+ (dec a) (inc b))))

this process is iterative:
> (+ 2 3)
(+ 1 4)
(+ 0 5)
5

|#

#|Exercise 1.10|#

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

#|
> (A 1 0)
(A 0 (A 0 (A 0 ... (A 0 (A 1 1))...)))
(A 0 (A 0 (A 0 ... (A 0 2)...)))
(A 0 (A 0 (A 0 ... 4)))
1024

> (A 2 4)
(A 1 (A 2 3))
(A 1 (A 1 (A 2 2)))
(A 1 (A 1 (A 1 (A 1 1))))
(A 1 (A 1 (A 1 2)))
(A 1 (A 1 4))
(A 1 16) ;2^16
65536

> (A 3 3)
(A 2 (A 3 2)
(A 2 (A 2 (A 3 1))
(A 2 (A 2 2))
(A 2 4)
(A 1 (A 1 (A 1 (A 2 1))))
(A 1 (A 1 (A 1 2)))
(A 1 (A 1 4))
(A 1 16) ;2^16
65536

(define (f n) (A 0 n))   ;2n
(define (g n) (A 1 n))   ;2^n
(define (h n) (A 2 n))   ;2^2^2..^2 (n is the number of 2s)
(define (k n) (* 5 n n)) ;5n^2

|#

#|Exercise 1.11|#

; Recursion implementation:

;(define (f n)
;  (if (< n 3)
;        n
;  (+ (f (- n 1))
;     (* 2 (f (- n 2)))
;     (* 3 (f (- n 3))))))

;> (f 4)
;11
;> (f 25)
;812934961

;Iterative process/solution

(define (f n)
  (f-iter 0 1 2 n))

(define (f-iter a b c n)
  (if (= n 0)
      a
      (f-iter b
              c
              (+ c
                 (* 2 b)
                 (* 3 a))
              (- n 1))))

;> (f 4)
;(f-iter 0 1 2 4)  ;0,1,2 are the base cases for (f 0), (f 1), and (f 2)
;(f-iter 1 2 4 3)  ;move values to the left as n is decremented.
;(f-iter 2 4 11 2)
;(f-iter 4 11 25 1)
;(f-iter 11 25 59 0)
;11

#|Exercise 1.12|#

(define (pascal n x)
  (if (or (= x 1) (= x n))
      1
      (+ (pascal (- n 1) (- x 1))
         (pascal (- n 1) x))))

;> (pascal 4 2)
;(pascal 3 1) + (pascal 3 2)
;1 + (pascal 2 1) + (pascal 2 2)
;1 + 1 + 1
;3


#|Exercise 1.13

Prove that Fib(n) is the closest integer to phi^n/sqrt(5) where
phi = (1 + sqrt(5))/2. Hint let psi = (1 - sqrt(5))/2 to prove
Fib(n) = (phi^n - psi^n)/sqrt(5).

|#

#|Exercises 1.14

Draw the tree illustrating the process generated by the count-change
procedure of 1.2.2 in making change for 11 cents.

What are the orders of growth of the space and number of steps used by
this process as the amount to be changed increases?

|#

#|Exercise 1.15

The sine of an angle (specified in radians) can be computed by making
use of the approximation sinx ~ x if x is sufficiently small, and the
trigonometric identity sin(x) = 3sin(x/3) - 4sin^3(x/3) to reduce the
size of the argument of sin.

(For purposes of this exercise an angle is considered “sufficiently
small” if its magnitude is not greater than 0.1 radians.) These ideas
are incorporated in the following procedures:

|#

(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle)
   (if (not (> (abs angle) 0.1))
       angle
       (p (sine (/ angle 3.0)))))

;1. How many times is the procedure p applied when (sine 12.15) is evaluated?

;2. What is the order of growth in space and number of steps (as a function
;of a) used by the process generated by the sine procedure when (sine a)
;is evaluated?


#|Exercise 1.16|#

(define (fast-expt b n)
  (fast-expt-iter b n 1))

(define (fast-expt-iter b counter product)
  (cond ((= counter 0)
         product)
        ((even? counter)
         (fast-expt-iter (square b) (/ counter 2) product))
        (else
         (fast-expt-iter b (- counter 1) (* b product)))))
                      
(define (square x)
  (* x x))
  
#|Exercise 1.17|#

(define (fast-multiply a b)
  (cond ((= b 0)
         0)
        ((even? b)
         (double (fast-multiply a (halve b))))
        (else
         (+ a (fast-multiply a (- b 1))))))

(define (double x)
  (+ x x))
  
(define (even? n)
  (= (remainder n 2) 0))

(define (halve x)
  (/ x 2))